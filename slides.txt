===================================
Verification and Validation of MOM6
===================================

.. :subtitle: TODO?
:author: Marshall Ward
:description: An overview of the MOM6 testing framework
:date: 17 March 2020


----

Verification

   Am I building the product right?

Validation

   Am I building the right product?

Barry Boehm, *Software Risk Management* (1989)


Verification
============

What are the requirement of my model?

* Does it compile on target platforms?
* Do restarts change the answer?
* Does parallelization change the answer?
* ...

Well-defined criteria that anyone can affirm


Validation
==========

* Regression testing of production runs
  *

* Are results physical?


Floating point review
=====================

.. image:: img/IEEE_754_Double_Floating_Point_Format.svg

.. math::

   (-1)^s \times 1.xxx\cdots x \times 2^{eee\cdots e}



Do I need bit reproducibility?
==============================

* Not necessarily for validation:
   Requirements (and assessments) should be resilient to floating point error

* Verification *does* need bit reproducibility
   No reliable way to automatically verify


Bit reproducibility
===================

* a + b = b + a
* (a + b) + c != a + (b + c)

Methods of reproducibility
   * Aggressive parentheses
      * Compiler must respect them!
   * Fixed-precision summation
   * xfirst/yfirst flags
   * rotationally invariant stencils


Checksum validation
===================

* Compute domain (no halos, no symmetric boundary)
* sum(abs()) (negative zero!)
* "Hash":
   * Min, max, mean (reproducible)
   * Bitcount checksums (incl. halo shifted counts)
* Paired sums for rotational invariance


Dimensional scaling
===================

* Float: (-1)^s * 1.(mmm...m) * 2^(nnn...n)

  Bits: smmm....mnnn....n

* 2^N scaling is an integer shift of yyyy
  which is reproducibly reversible

  ... up to over/underflow of yyyy!

* Ideal procedure:
   * Scale at input
   * Manipulate rescaled numbers
   * De-scale at output, checksum, etc


Examples of Dimensional Errors
==============================


Travis Testing
==============

* Code validation tests
* Platform independent


Test build configuration
========================

* GCC Fortran 9.x
* Full warnings
   * Permit float inequality with zero
* Stack initialization
   * Signal NaN for float
   * 2^(N-1) - 1 for integer, logical


Running on Travis
=================

* Makefile is standalone, but can be configured by Travis:

  * DO_REGRESSION_TESTS
  * MOM_TARGET_SLUG
  * MOM_TARGET_LOCAL_BRANCH


Gaea regression tests
=====================

* Full suite, platform specific, run on Gaea
* Each development hub would ideally have its own regression tests


TODO
====

* Valgrind testing
* Code coverage
* Zero-warnings


And the future
==============

* Cyclomatic (McCabe) complexity
* AST analyzer
   * Fortran lint tools (flint??)
