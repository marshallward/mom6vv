===================================
Verification and Validation of MOM6
===================================

:authors: - Marshall Ward
          - Robert Hallberg
          - Alistair Adcroft
:description: An overview of the MOM6 testing framework
:date: 2020 June 8


----

**Verification**

   Am I building the product right?

**Validation**

   Am I building the right product?

Barry Boehm, *Software Risk Management* (1989)


Verification
============

What are the *design specifications* of my model?

* Does it compile on target platforms?
* Are the equations dimensionally consistent?
* Does parallelization change the answers?

*Verification is the confirmation of design specifications.*


Validation
==========

Does our model meet operational needs?

* Does it produce realistic simulations?
* Are relevant physical features present?
* Can I reproduce my old simulations?

*Validation is an assessment of the final product.*


V&V in Development
==================

.. list-table::

   * - .. figure:: img/waterfall.svg
          :width: 60%
          :target: https://en.wikipedia.org/wiki/File:Waterfall_model.svg

          Waterfall

     - .. figure:: img/v_model.svg
          :target: https://commons.wikimedia.org/wiki/File:Systems_Engineering_Process_II.svg

          V-model

.. figure:: img/agile.jpeg
   :width: 50%
   :target: https://medium.com/open-product-management/crash-article-in-agile-development-da960861259e


.. notes::
   All software development models rely on some form of verification or
   validation.

   The waterfall method (upper left) has a single stage of development, like
   building a bridge or launching a space rocket, so validation is not
   possible.  Verification must be extremely thorough.

   More iterative models like the V-model treat the development process as
   verification, and then use validation to re-define the verification steps.

   Modern Agile methods define multiple development cycles, including
   verification and validation after each "scrum".  Scrum-like methods can
   blur the distinction between verification and validation.


V&V in MOM6
===========

.. image:: img/mom_submit.svg
   :width: 20%
   :class: float

Some text here..

* Bullet 1

* Bullet 2


MOM6 Verification
=================

.. image:: img/mom_verify.svg
   :width: 55%


MOM6 Validation
===============

.. TODO

* Site-specific

* Gaea Pipeline

* Human validation


Hub Validation
==============

.. image:: img/gitrepos.svg
   :width: 55%


Verification Tests
==================

==========  =================================
Test        Description
==========  =================================
grid        Symmetric/Asymmetric memory grids
layout      1×1 and 2×1 domain decomposition
rotation    Index rotation
restart     Restart at mid-run
repro       Optimized reproducible mode
openmp      OpenMP (single-thread)
nan         NaN array initialization
dim         Dimensional scaling
==========  =================================

Each test requires bit reproducibility


Bit reproducibility
===================

.. figure:: img/pilotwings_repro.mp4
   :target: https://twitter.com/Foone/status/1126996260026605568

   Identical code and input, different math libraries


Floating point review
=====================

.. image:: img/IEEE_754_Double_Floating_Point_Format.svg

.. math::

   (-1)^s \times 1.\{\text{frac}\}\times 2^{\{\text{exp}\}}

* Smallest fractional diff: :math:`2^{-52} \approx 2.2 \times 10^{-16}`

* 17 digits to uniquely specify a result


Associativity
=============

* :math:`10^{-16} + 1 - 1 = ?`

   * :math:`(10^{-16} + 1) - 1 = 0`
   * :math:`10^{-16} + (1 - 1) \approx 1.1 \times 10^{-16}`

* :math:`1 + 2 \times 10^{-16} - 10^{-16} = ?`

   * :math:`(1 + 2 \times 10^{-16}) - 10^{-16}
            \approx 1 + 2.2 \times 10^{-16}`
   * :math:`1 + (2 \times 10^{-16} - 10^{-16}) = 1`


More associativity
------------------

Let :math:`s = 1 + 2 \times 10^{-16}`; what is :math:`(s + 1) - 1`?

   * :math:`s + 1 = 2`
   * :math:`(s + 1) - 1 = 1 \neq s`

Manipulation of `s` removed the least significant bit.


Multiplication associativity
============================

Multiplication is less sensitive, but nonetheless depends on associativity:

If :math:`a = b = 1.5`, and :math:`c = 1 + 2^{-52}`, then

.. math::

   (a \times b) \times c &= 2.25 + 2^{-51} \\
   a \times (b \times c) &= 2.25 + 2^{-50}

Note power-of-two (radix) multiplication is reversible (up to over/underflow!)


Integrity of parentheses
========================

V&V requires integrity of parentheses

GCC Fortran::

   gfortran -fprotect-parens ...    # default
   gfortran -Ofast ...              # Sets -fno-protect-parens

Intel Fortran::

   ifort -assume protect-parens     # Not default

Note: Standard requires (J3/18-007r1, 10.1.5)

Kahan summation
---------------

Attach here? See
https://groups.google.com/forum/#!topic/comp.lang.fortran/D-tFxYgHa_4


Parallel summation
==================

Problem is extended to parallel sums:

See hallberg & adcroft


Algorithmic ordering
====================

Show xfirst/yfirst flag example


Rotational invariance
=====================

Show bob's pictures


Checksum validation
===================

* Compute domain (no halos, no symmetric boundary)
* sum(abs()) (negative zero!)
* "Hash":
   * Min, max, mean (reproducible)
   * Bitcount checksums (incl. halo shifted counts)
* Paired sums for rotational invariance


Dimensional scaling
===================

* Float: (-1)^s * 1.(mmm...m) * 2^(nnn...n)

  Bits: smmm....mnnn....n

* 2^N scaling is an integer shift of yyyy
  which is reproducibly reversible

  ... up to over/underflow of yyyy!

* Ideal procedure:
   * Scale at input
   * Manipulate rescaled numbers
   * De-scale at output, checksum, etc


Examples of Dimensional Errors
==============================


Test build configuration
========================

* GCC Fortran 9.x
* Full warnings
   * Permit float inequality with zero
* Stack initialization
   * Signal NaN for float
   * 2^(N-1) - 1 for integer, logical


Running on Travis
=================

* Makefile is standalone, but can be configured by Travis:

  * DO_REGRESSION_TESTS
  * MOM_TARGET_SLUG
  * MOM_TARGET_LOCAL_BRANCH


Gaea regression tests
=====================

* Full suite, platform specific, run on Gaea
* Each development hub would ideally have its own regression tests


TODO
====

* Valgrind testing
* Code coverage
* Zero-warnings


And the future
==============

* Cyclomatic (McCabe) complexity

* AST analyzer

* Fortran lint tools (flint??)
